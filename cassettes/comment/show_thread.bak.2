#!/bin/bash

cd `dirname $0`

threadtail=5
thread_num=${1##*/}
n=thread_$thread_num
lines=`wc -l <$1`
size=$(stty size <&$stdin)
cols=${size#* }
pic_pst_mgn=1

print_short()
{
	# prints 1st and $threadtail last posts in the thread
	perl -e '$_=<>; print; for ($i=0;$i<'$threadtail';$i++) { $_=<>; push @a, $_ } while (<>) { push @a, $_; shift @a } print @a'
}

sed_subst()
{
	sed -e '/^curses:/d' \
   	-e 's/^\(out:printl:.*\)>>\(.*\)/\1\x1b[31m>>\2\x1b[39m/' \
	-e 's/^\(out:printl:.*[^>]\)>\([^>].*\)/\1\x1b[32m>\2\x1b[39m/' \
	-e 's/^\(out:printl:\)/\1\x1b[2K\x1b[G/' 
}

perl_print()
{
	perl -e '$a=q('"$pic_data"');
	         $b='\'"${c2//\'/}"\'';
	         #$b='\'"${c2//\'/\'}"\''; # FIXME doesnt work with )
	         $h=q('"$post_height"');
	         $w=q('"$post_width"');
	         $a=~s/^out:printc://gm;
	         @c=split /\n/, $a;
	         $b=~s/\\n/\n/gm;
	         $b=~s/\\\x27/\x27/gm;
	         $s="out:printl:\x1b[16C ";
	         
	         @ln=split /\n/, $b;
	         for (@ln) {
			while (s/^(.{$w})//) {
				push @ln2, $1;
			}
			push @ln2, $_;
	         }

	         $h=scalar(@ln2) > $h ? scalar(@ln2) : $h; 
		
	         for ($i=0; $i<$h; $i++) {
			print $c[$i], " ", $ln2[$i], "\n";
	         }'
}

process_post()
{
	d="`cut -d@ -f1 <<<"$c"`"
	c2="`cut -d@ -f3 <<<"$c"`"
	p="`cut -d@ -f4 <<<"$c"`"
	pw="`sed -n 1p <"./pic/$p" | wc -c`"
	ph="`wc -l <"./pic/$p"`"
	[ "$short" ] && ((n==1)) &&
		n=$((lines>5?lines-$threadtail:n))
	perl -e 'use POSIX qw(strftime); print "out:printl:" . strftime("%Y-%m-%d %H:%M",localtime('$d'/1000)) . "\x1b[32m'\ \#$n'\x1b[39m\n";'
	((n++));

	pic_data="$(
		[ "$p" ] && 
			printpic2 "./pic/$p" | sed 's/^/out:printc:/'
	)"

	pic_height=$(wc -l <<<"$pic_data")
	comnt_len=$(wc -c <<<"$c2")
        ((pw-=4)) #extra escape chars counted as picture
	((
		pic_width=pw?pw+pic_pst_mgn:0,
		post_width=cols-pic_width,
		comnt_height=comnt_len/post_width+1
	))
	((
		post_height=`max $pic_height $comnt_height` 
	))

	perl_print |
	sed 's/^/out:printl:/'

	echo out:printl:      # after post
}
 
if [ $short ]
then
	print_short << $1
else
	cat << $1
fi |
while read -r c
do
	process_post
done |
sed_subst

