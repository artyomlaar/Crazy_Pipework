#!/bin/bash

# $board is in env.

board=$1
THREAD=$2
cur_dim=${3-0}


clear=$'\x1b[0m\x1b[H\x1b[2J'
echo "out:print:$clear"

td="[0-9]\{2\}"


# Retard alert:
wc() {
	local i ln
	while IFS= read -r ln
	do
		((i++))
	done
	echo $i
}

add_to_cache() {
	local post_dim=$1
	local post_id=$2
	local line
	local cur_line
	local line_count
	local line_in_post
	local data
	data="$(./show_post $board $THREAD $post_id)"
	local fail=$?

	echo "fail == $fail" >> thread_debug

	if ((fail))
	then
		return 1
	fi

	echo add_to_cache $2 >>thread_debug

	# post_start[$post_id]=$current_line
	# post_head[$post_id]=$cur_head
	post_len[$post_id]=$(wc -l <<<"$data")
	post_lines[$post_id]="$data"
	((head_post_num[post_dim]++))
	((head_len[post_dim] += post_len[post_id]))

	if ((post_dim == post_id))
	then
		cur_dim=$post_dim
		merge_cache_chunks $post_dim $((post_dim + 1))
	else
		head_lines[$post_dim]+="$data"$'\n'
	fi

	return 0
}

merge_cache_chunks() {
	local first=$1
	local second=$2
	((head_len[first] += head_len[second]))
	((head_post_num[first] += head_post_num[second]))
	head_lines[first]="$data"$'\n'"${head_lines[second]}"

	unset head_lines[second]
	unset head_post_num[second]
	unset head_len[second]
}

load() {
	local start=$1
	local end=$2

	echo out:printl:load $1..$2 >>thread_debug

	new_cur_end=$((rows + 1 + 1))
	while ((start < 1)) 
	do
		((cur_dim--))
		if add_to_cache $cur_dim $cur_dim 
		then
			echo y,curend=$curend $start..$2 >>thread_debug
			((new_cur_end = curend + post_len[cur_dim]))
			((start += post_len[cur_dim]))
			echo y,curend=$curend $start..$2 >>thread_debug
		else
			echo n,curend=$curend $start..$2 >>thread_debug
			curend=$new_cur_end
			start=1
			curend=$((start+rows))
			echo n,curend=$curend $start..$2 >>thread_debug
			break
		fi
		curend=$((start+rows))
                echo a,curend=$curend $start..$2 >>thread_debug

	done
	echo out:printl:load1 done $1..$2 >>thread_debug

	while ((end > head_len[cur_dim]))
	do
		add_to_cache $cur_dim $((cur_dim + head_post_num[cur_dim])) ||
			break
	done
}

display() {
	cur_line=$1
	scr_h=rows
	first_line=$cur_line
	last_line=$((first_line+scr_h))

	# echo "out:print:$clear"
	
	echo "display: $1" >thread_debug
	load $first_line $last_line
	thread="${head_lines[cur_dim]}"
	thrlen=`wc -l <<<"$thread"`
	echo "$thread" > debug_lines
	stty -icanon -echo <&$stdin
}

refresh_thread()
{
	echo "out:print:$clear"
	thread=$(./show_post $board $THREAD 1)

	echo "$thread" >/crazy_pipework/debug_thread.txt

	stty -icanon -echo <&$stdin
	
	thrlen=0
	while read
	do
		((thrlen++))
	done <<<"$thread"
}

get_current_post_id() {
	local sig="out:printc:$td$td-$td-$td $td:$td"
	c_post=$(
		head -n1 <<<"$1" | 
		perl -p -e 's/^$sig.*#(\d+).*/\1/ or exit 1'
	)
}

get_current_link() {
	c_link=$(
		head -n1 <<<"$1" | 
		perl -p -e 's/^out:printc:.*>>(\d+).*/\1/ or exit 1'
	)
}

push_position() {
	ret_link+=" $cur_dim:$curend"
	cur_dim=$c_link
	curend=$((rows+1))
}

pop_position() {
	last_pos=${ret_link##* }
	ret_link=${ret_link% *}
	cur_dim=${last_pos%:*}
	curend=${last_pos#*:}
	((curend--)) # This should lead to the post top.
}

print_thread()
{
	echo -e "out:print:\e[H\e[0m"
	# local end=$1
	local start

	end=$curend
	display $((end-rows))
	end=$curend

	if false # ((end == oldpos+1))
	then
		((end-=2))
		start=$((end-0))
		echo -e "out:print:\e[$((end))H\e[2K"
	else
		start=$((end-rows))
		((end-=2))
	fi
	oldpos=$1

	scr="$(sed -n $start,${end}p <<<"$thread")"
	prs_start=$((end-rows+2))
	prs_scr="$(sed -n $prs_start,${end}p <<<"$thread")"

                echo scr=sed $start..$end >>thread_debug

	if [ -z "$scr" ]
	then
		scr=$'out:printl:'
	fi

	echo "$scr"
	echo -e "out:print:\e[$((rows));1H\e[2K\e[Gw - up; s - down"

	unset c_post c_link
	if get_current_post_id "$prs_scr"
	then
               	echo "out:print:; r - reply"
	elif get_current_link "$prs_scr"
	then
		echo "out:print:; r - follow link"

	fi
}

init() {
	refresh_thread

	size=$(stty size <&$stdin)
	rows=${size% *}
	prows=$((rows-1))
	curend=$((rows+1))
	print_thread $curend
}

proc_cmd()
{
	if [[ $1 == user:key=* ]]
	then
		k="${1#user:key=}"
		if [[ $k == q ]]
		then
			exit
		elif [[ $k == w ]]
		then
			( ((cur_dim > 0)) || ((curend-1 > rows)) )&&
				((--curend))
		elif [[ $k == s ]]
		then
			((curend+1<rows+thrlen)) &&
				((++curend))
		elif [[ $k == W ]]
		then
			((curend=((cur_dim > 0) || (curend-rows>rows))?
				curend-prows:
				rows+1))
		elif [[ $k == S ]]
		then
			((curend=(curend+rows<rows+thrlen)?curend+prows:rows+thrlen))
			echo "out:print:$clear"
		elif [[ $k == b ]]
		then
			if [ "$ret_link" ]
			then
				pop_position
			fi
		elif [[ $k == r ]]
		then
			if [ "$c_post" ]
			then
				./post_menu $board $THREAD $c_post
				refresh_thread
			elif [ "$c_link" ]
			then
				push_position
			fi
		fi	
	fi
	print_thread $curend

}
init
while IFS= read -r cmd; do proc_cmd $cmd; done


