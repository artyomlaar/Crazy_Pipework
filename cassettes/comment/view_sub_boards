#!/bin/bash

cd `dirname $0`

# From env.
board=${1-/}

clear=$'\x1b[0m\x1b[H\x1b[2J'
echo "out:print:$clear"

color_green=$'\e[32m'
color_red=$'\e[31m'
color_blue=$'\e[34m'
color_default=$'\e[39m'
max_board_depth=8

get_current_board() {
	local cmd="out:printc:\e\[3.m"
	cur_board=$(
		head -n1 <<<"$1" |
		perl -p -e "s|^$cmd\s*(/\S+/).*|\1| or exit 1"
	)
}

current_board_depth() {
	echo "$board" |
	perl -e '$_=<>; $i=0;
		chomp;
		while (s|[^/]+||) {
			$i++
		}
		END {
			print "$i\n"
		}
	'
}

view_board()
{
	local board_path name threads
	echo -e "out:printc:\tSub-boards of $board:"
	ls -dt board/$board/*/_/ |
	while read b
	do
		board_path=$(sed -E "s|.*(/[^/]+/)/*_/*|\1|" <<<"$b")
		name=$(cat $b/board_title)
		threads=$(cat $b/post_count)
		echo -e "out:printc:$color_red$board_path$color_default - $name\t$color_green(${threads:-0} Threads)$color_default"
	done
}

refresh_board()
{
	echo "out:print:$clear"
	thread=$(view_board)
	
	stty -icanon -echo <&$stdin
	
	thrlen=0
	while read
	do
		((thrlen++))
	done <<<"$thread"
}

print_thread()
{
	echo -e "out:print:\e[H\e[0m"
	end=$1
	if ((end == oldpos+1))
	then
		((end-=2))
		start=$((end-0))
		echo -e "out:print:\e[$((end))H\e[2K"
	else
		start=$((end-rows))
		((end-=2))
	fi
	scr="$(sed -n $start,${end}p <<<"$thread")"
	prs_start=$((end-rows+2))
	prs_scr="$(sed -n $prs_start,${end}p <<<"$thread")"
	if [ -z "$scr" ]
	then
		scr=$'out:printl:'
	fi
	echo "$scr"
	echo -e "out:print:\e[$((rows));1H"
	echo -e "out:print:\e[2K\e[Gw - up; s - down"

	if [ "$sub_boards_allowed" ]
	then
		echo "out:print:; n - new board"
	fi

	if get_current_board "$prs_scr"
	then
			echo "out:print:; r - enter"
	fi
	
	oldpos=$1
}

init() {
	refresh_board

	size=$(stty size <&$stdin)
	rows=${size% *}
	prows=$((rows-1))
	curend=$((rows+1))
	if ((`current_board_depth` + 1 <= max_board_depth))
	then
		sub_boards_allowed=1
	fi
	print_thread $curend
}

make_board() {
	local name password
	local prompt=$'Board name: \nPassword: \nBoard title: '
	local p="[a-z0-9_]+"
	CURS_POS=12 edit_variable res "$prompt"

	name="$(get_text_data "Board name:" "$p" <<<"$res")"
	password="$(get_text_data "Password:" "$p" <<<"$res")"
	title="$(get_text_data "Board title:" ".*" <<<"$res")"

	if ! [ "$name" ] || [ "$name" == "_" ]
	then
		edit_variable $'\tFail!\n Board name not set.'
	elif ! [ "$password" ]
	then
		edit_variable $'\tFail!\n Board Admin password not set.'
	else
		edit_variable $'\tSuccess!'

		mkdir board/$board/$name
		mkdir board/$board/$name/_
		echo "$name" >board/$board/$name/_/board_name
		echo "$password" >board/$board/$name/_/admin_password
		echo "$title" >board/$board/$name/_/board_title
	fi
}

proc_cmd()
{
	if [[ $1 == user:key=* ]]
	then
		k="${1#user:key=}"
		if [[ $k == q ]]
		then
			exit
		elif [[ $k == w ]]
		then
			((curend-1>rows)) &&
				((--curend))
		elif [[ $k == s ]]
		then
			((curend<=rows+thrlen)) &&
				((++curend))
		elif [[ $k == W ]]
		then
			((curend=(curend-rows>rows)?curend-prows:rows+1))
		elif [[ $k == S ]]
		then
			((curend=(curend+rows<rows+thrlen)?curend+prows:rows+thrlen))
			echo "out:print:$clear"
		elif [[ $k == r ]]
		then
			if [ "$cur_board" ]
			then
				./view_board ${board%/}$cur_board
				# curend=$((rows+1))
				refresh_board
			fi
		elif [[ $k == n ]]
		then
			make_board
			refresh_board
		fi	
	fi
	print_thread $curend

}
init
while IFS= read -r cmd; do proc_cmd $cmd; done
