#!/bin/bash

#TODO:don't log main:log commands

declare -A pid pipe in_pipe loaded 

wait_all() {
	no_wait=( in mod user )
	exclude_pids=$(echo ${no_wait[@]} |
		tr -c '[0-9]' ',')
	wait_pids=$(echo ${pid[@]} |
		sed "$(eval e \''s/\<'\'{$exclude_pids}\''\>//;'\')")
	wait $wait_pids
}

md_set_io()
{
	stdin="`cut -d: -f1 <<<"$1"`"
	stdout="`cut -d: -f2 <<<"$1"`"
}

md_give_stdin()
{
	echo "$1:stdin=$stdin"
}

md_give_stdout()
{
	scr_writers+="$1 "
	echo "$1:stdout=$stdout"
	if [ $outpipe ]
	then
		echo "$1:set_new_output:$outpipe"
	fi
}

md_load()
{
	if [ "${loaded[$1]}" ]
	then
		echo "mod:ready:$1"
		return
	else
		loaded[$1]=1
	fi

	pipe[$1]="$pdir/$1"
	in_pipe[$1]="$pdir/to_loop_$1"

	[ -p "${pipe[$1]}" ] || mkfifo "${pipe[$1]}" 
	[ -p "${in_pipe[$1]}" ] || mkfifo "${in_pipe[$1]}" 

	$BINDIR/$1 <$pdir/$1 >${in_pipe[$1]} 2>$logdir/$1 &
	pid[$1]=$!

	mod[${#mod[@]}]=$1 
	echo "main:add:$1"
	echo "$1:init"
}

mod_use_step()
{
	[ -z "$tmp_use_mods" ] && 
	{
		echo "user:init"
		return
	}
	cur_mod="${tmp_use_mods%%&&*}"
	echo "mod:load:$cur_mod"
	
	[[ "$tmp_use_mods" =~ "&&" ]] || tmp_use_mods=""
	tmp_use_mods="${tmp_use_mods#*&&}"
}

set_piped_output()
{
	outpipe="$pdir/all_output"
	mkfifo $outpipe
	echo "$1:all_output:$outpipe:$stdout"
	for i in $scr_writers
	do
		echo "$i:set_new_output:$outpipe"
	done
}

proc_cmd()
{
	case "$1" in
	(mod:use:*) 		use_mods="`rm_ws "${1#mod:use:}"`";
				tmp_use_mods="$use_mods"; mod_use_step ;;
	(mod:load:*)		md_load 	"${1#mod:load:}" ;;
	(mod:ready:*)		mod_use_step ;;
	(mod:free:*)		: ;;
	(mod:add:*)		: ;;
	(mod:get_stdin:*)	md_give_stdin 	"${1#mod:get_stdin:}" ;;
	(mod:get_stdout:*)	md_give_stdout 	"${1#mod:get_stdout:}" ;;
	(mod:set_io:*)		md_set_io 	"${1#mod:set_io:}" ;;
	(mod:set_piped_output:*)
		set_piped_output		"${1#mod:set_piped_output:}";;
	esac
}

mod_init()
{
	mod[${#mod[@]}]=user; pipe[user]="$pdir/user"; pid[user]=$$
	# FIXME: wrong pid 
	mod[${#mod[@]}]=mod; pipe[user]="$pdir/mod"; pid[mod]=$$ 
}

mod_init

while read cmd; do proc_cmd "$cmd"; done

#wait_all # ${pid[out]}
wait ${pid[out]}	# Wait for all batched output to flush.

#echo debug:mod ${pid[out]} terminated. >&10
