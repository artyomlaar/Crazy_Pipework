wait_for()
{
#	local a=`sed -u "/$1/q"`
#	local a=`perl -pe '/'"$1"'/ && do { print; exit }'`
#	these only work with input not already ready for read on their startup

	while IFS= read -r r
	do
		a+="$r"$'\n'
		[[ "$r" = "$1"* ]] && break
	done

	local b="`perl -e '$_="'"$a"'"; s/^'"$1"'.*\Z//m; print'`"
	#FIXME:does not end in \n if b is empty UPD: may be fixed now.

	echo -n "$b${b:+$'\n'}"

	if [ -n "$2" ]
	then
		c=`perl -e '$_="'"$a"'"; s/^'"$1"'(.*)\Z/$1/m; print $1'`;
		eval "$2=$c"
	fi
}
export -f wait_for

rm_ws()
{
	tr -d ' \t' <<<"$1"
}
export -f rm_ws

obj_new ()
{
	for e in `eval 'echo ${!'$1'[@]}'`
	do 
		echo -n [$e]="${dd[$e]}" |
		sed 's/\([^\]\) /\1\\ /g'
		echo -n " "
	done
}
export -f obj_new

max ()
{
	echo $(($1 > $2 ? $1 : $2))
}
export -f max

read_key()
{
	IFS= read -r KEY
	KEY="${KEY#user:key=}"
}
export -f read_key
read_arrow()
{
	read_key &&
	local mod_key=$1
	if [ "_$KEY" = _D ]
	then
		CTRL_KEY="$mod_key+Left"
	elif [ "_$KEY" = _A ]
	then
		CTRL_KEY="$mod_key+Up"
	elif [ "_$KEY" = _B ]
	then
		CTRL_KEY="$mod_key+Down"
	elif [ "_$KEY" = _C ]
	then
		CTRL_KEY="$mod_key+Right"
	fi
}

CTRL_KEY=""

read_ctrl_key()
{
	read_key && 
	if [ "$KEY" = "[" ]
	then
	read_key &&
		if [ "_$KEY" = _A ]
		then
			CTRL_KEY="Up"
		elif [ "_$KEY" = _B ]
		then
			CTRL_KEY="Down"
		elif [ "_$KEY" = _D ]
		then
			CTRL_KEY="Left"
		elif [ "_$KEY" = _C ]
		then
			CTRL_KEY="Right"
		elif [ "_$KEY" = _3 ]
		then
			read_key && [ "_$KEY" = _~ ] &&
			CTRL_KEY="Delete"
		elif [ "_$KEY" = _5 ]
		then
			read_key && [ "_$KEY" = _~ ] &&
			CTRL_KEY="PageUp"
		elif [ "_$KEY" = _6 ]
		then
			read_key && [ "_$KEY" = _~ ] &&
			CTRL_KEY="PageDown"
		elif [ "_$KEY" = _1 ]
		then
			read_key && [ "_$KEY" = "_;" ] && read_key &&
			if [ "_$KEY" = _5 ]
			then
				read_arrow "Ctrl"
			elif [ "_$KEY" = _3 ]
			then
				read_arrow "Alt"
			fi
		fi
	elif [ "$KEY" = "O" ]
	then
	read_key &&
		if [ "_$KEY" = _H ]
		then
			CTRL_KEY="Home"
		elif [ "_$KEY" = _F ]
		then
			CTRL_KEY="End"
		fi
	fi
}
export -f read_ctrl_key

fields()
{
	local p="$1" i
	shift
	for i
	do
		printf "%q\n" "$(cut -d: -f$i <<<"$p")"
	done
}
export -f fields

resize()
{
#	command resize
#	ROWS=$LINES
#	COLS=$COLUMNS
	ROWS=`stty size <&$stdin | cut -d\  -f1`
	COLS=`stty size <&$stdin | cut -d\  -f2`
}
export -f resize

try_inc_a()
{
        if [ $a -lt $max ]
        then
                ((a++))
        fi
}
export -f try_inc_a

try_dec_a()
{
        if [ $a -gt $min ]
        then
                ((a--))
        fi
}
export -f try_dec_a

read_ctrl()
{
        read_ctrl_key
        case $CTRL_KEY in
	        (Up) try_dec_a ;;
	        (Down) try_inc_a ;;
        	(Home) a=$min ;;
        	(End) a=$max ;;
	esac
}
export -f read_ctrl
